"""
Django settings for django_test project.

Generated by 'django-admin startproject' using Django 4.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import datetime
from pathlib import Path
import os

from environs import Env
import redis

env = Env()
env.read_env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DEBUG", default=False)

ALLOWED_HOSTS = env.list("ALLOWED_HOSTS", default=["*"])
CORS_ALLOWED_ORIGINS = env.list("CORS_ORIGIN_WHITELIST")

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.gis",
    # Rest Framework
    "corsheaders",
    "rest_framework",
    "drf_yasg",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    # "rest_email_auth",
    # Apps
    "apps.webApp",
    "apps.backoffice",
    "csp"
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "querycount.middleware.QueryCountMiddleware",
    "corsheaders.middleware.CorsMiddleware",
]
# "compartidos.logger_middleware.ApiLoggingMiddleware",
# "compartidos.audit_middleware.AuditMiddleware",
ROOT_URLCONF = "configuracion.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "configuracion.wsgi.application"

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": env.str("DB_ENGINE"),
        "NAME": env.str("DB_NAME"),
        "USER": env.str("DB_USER"),
        "PASSWORD": env.str("DB_PASSWORD"),
        "HOST": env.str("DB_HOST"),
        "PORT": env.str("DB_PORT"),
    }
}

print(
    f"Conectado con el usuario {DATABASES['default']['USER']} a "
    f"{DATABASES['default']['HOST']}/{DATABASES['default']['NAME']}"
)

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

AUTH_USER_MODEL = "backoffice.User"

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

ENABLE_API_LOGGING = True

LOG_LEVEL = "INFO" if ENABLE_API_LOGGING else "WARNING"

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{asctime} - {levelname} - {message}",
            "style": "{",
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
    },
    "loggers": {
        "": {
            "handlers": ["console"],
            "level": "INFO" if ENABLE_API_LOGGING else "WARNING",
        },
    },
}

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

REST_FRAMEWORK = {
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "PAGE_SIZE": 1000,
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
}

SIMPLE_JWT = {
    # how long the original token is valid for
    "ACCESS_TOKEN_LIFETIME": datetime.timedelta(minutes=3),
    "REFRESH_TOKEN_LIFETIME": datetime.timedelta(minutes=10),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "TOKEN_OBTAIN_SERIALIZER": "api.adapters.primaries.authentication.login_serializers.TokenObtainPairSerializer",
    # "TOKEN_REFRESH_SERIALIZER": "api.adapters.primaries.authentication.login_serializers.TokenRefreshSerializer",
}

SWAGGER_SETTINGS = {
    # 'USE_SESSION_AUTH': False,
    "SECURITY_DEFINITIONS": {
        "Bearer": {"type": "apiKey", "name": "Authorization", "in": "header"}
    }
}

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Email Settings

EMAIL_BACKEND = os.environ.get("EMAIL_BACKEND")
EMAIL_HOST = os.environ.get("EMAIL_HOST")
EMAIL_PORT = os.environ.get("EMAIL_PORT")
EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD")
EMAIL_USE_TLS = os.environ.get("EMAIL_USE_TLS")

DEFAULT_FROM_EMAIL = os.environ.get("DEFAULT_FROM_EMAIL")

URL_BASE_OPENFIN = os.environ.get("URL_BASE_OPENFIN")

# OSGeo4W settings
# GDAL_LIBRARY_PATH = os.path.join(os.environ['OSGEO4W_ROOT'], 'bin', 'gdal306.dll')
# GEOS_LIBRARY_PATH = os.path.join(os.environ['OSGEO4W_ROOT'], 'bin', 'geos_c.dll')

# GDAL_LIBRARY_PATH = os.path.join(os.environ['GDAL_LIBRARY_PATH'])
# GEOS_LIBRARY_PATH = os.path.join(os.environ['GEOS_LIBRARY_PATH'])

# Set the GDAL and GEOS library paths
try:
    GDAL_LIBRARY_PATH = os.path.join(os.environ["OSGEO4W_ROOT"], "bin", "gdal306.dll")
    GEOS_LIBRARY_PATH = os.path.join(os.environ["OSGEO4W_ROOT"], "bin", "geos_c.dll")
except KeyError:
    print("Working without OSGEO4W")
    GDAL_LIBRARY_PATH = os.environ.get("GDAL_LIBRARY_PATH")
    GEOS_LIBRARY_PATH = os.environ.get("GEOS_LIBRARY_PATH")

    # Add the paths to the system path
    if GDAL_LIBRARY_PATH and os.path.exists(GDAL_LIBRARY_PATH):
        os.environ["PATH"] = (
            os.path.dirname(GDAL_LIBRARY_PATH) + ":" + os.environ["PATH"]
        )

    if GEOS_LIBRARY_PATH and os.path.exists(GEOS_LIBRARY_PATH):
        os.environ["LD_LIBRARY_PATH"] = (
            os.path.dirname(GEOS_LIBRARY_PATH)
            + ":"
            + os.environ.get("LD_LIBRARY_PATH", "")
        )

# CELERY
CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL', 'redis://redis:6379/0')
CELERY_RESULT_BACKEND = os.getenv('CELERY_RESULT_BACKEND', 'redis://redis:6379/0')
REDIS_URL_1='redis://redis:6379/1'

CELERY_TASK_ALWAYS_EAGER = False

CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True

# HEADERS
SECURE_HSTS_SECONDS = 31536000
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = "DENY" # 'SAMEORIGIN'
SECURE_BROWSER_XSS_FILTER = True
CSP_DEFAULT_SRC = ("'self'",)

